{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iman\\\\Desktop\\\\Ashfak\\\\hold\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport * as ReactDOMClient from 'react-dom/client';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Message extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"name\",\n          children: this.props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"date\",\n          children: this.props.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: this.props.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass Send extends React.Component {\n  async send() {\n    const docData = {\n      stringExample: document.getElementById(\"input\").text\n    };\n    var names = document.getElementsByClassName(\"message\");\n\n    for (let i = 0; i < names.length; i++) {\n      var element = names[i].getElementsByClassName(\"name\");\n      console.log(element);\n\n      switch (element[0].innerHTML) {\n        case 'Victor':\n          element.style.color = \"orange\";\n          break;\n\n        case 'Ashfak':\n          element.style.color = \"red\";\n          break;\n\n        case 'Tiffanie':\n          element.style.color = \"blue\";\n          break;\n\n        case 'Zhipeng':\n          element.style.color = \"green\";\n          break;\n\n        default:\n          element.style.color = \"white\";\n          break;\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"send\",\n        onClick: this.send,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('http://localhost:5000/express_backend/');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.state = {\n      names: [],\n      texts: []\n    };\n  }\n\n  async componentDidMount() {\n    let b = await this.callBackendAPI(); //.then(res => \n\n    console.log(b);\n    this.setState({\n      names: b.names\n    }); //.catch(err => console.log(err));\n  } // fetching the GET route from the Express server which matches the GET route from server.js\n\n\n  componentWillUnmount() {}\n\n  render() {\n    let i = 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.names.map(e => /*#__PURE__*/_jsxDEV(Message, {\n        name: e.name,\n        text: e.msg,\n        color: e.color\n      }, i++, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 45\n      }, this)), /*#__PURE__*/_jsxDEV(Send, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }, this); //\t<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    //\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    //\t<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap\" rel=\"stylesheet\">\n    //</div>);\n  }\n\n}\n\nconst container = document.getElementById('root'); // Create a root.\n\nconst root = ReactDOMClient.createRoot(container);\nroot.render( /*#__PURE__*/_jsxDEV(List, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 103,\n  columnNumber: 13\n}, this));","map":{"version":3,"sources":["C:/Users/Iman/Desktop/Ashfak/hold/client/src/index.js"],"names":["React","ReactDOMClient","Message","Component","render","props","name","color","text","Send","send","docData","stringExample","document","getElementById","names","getElementsByClassName","i","length","element","console","log","innerHTML","style","List","constructor","callBackendAPI","response","fetch","body","json","status","Error","message","state","texts","componentDidMount","b","setState","componentWillUnmount","map","e","msg","container","root","createRoot"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as ReactDOMClient from 'react-dom/client';\nimport './index.css';\nclass Message extends React.Component\n{\n\trender()\n\t{\n\t\treturn <div className = \"message\">\n\t\t\t<div className = \"header\">\n\t\t\t\t<span className = \"name\">{this.props.name}</span><span className = \"date\">{this.props.color}</span>\n\t\t\t</div>\n\t\t\t<div className = \"text\">{this.props.text}</div>\n\t\t</div>\n\t}\n}\nclass Send extends React.Component\n{\n\t\n\tasync send()\n\t{\n\t\tconst docData = \n\t\t{\n\t\t\tstringExample: document.getElementById(\"input\").text,\n\t\t};\n\t\tvar names = document.getElementsByClassName(\"message\");\n\t\tfor (let i = 0; i < names.length; i++)\n\t\t{\n\t\t\tvar element = names[i].getElementsByClassName(\"name\")\n\t\t\tconsole.log(element);\n\t\t\tswitch (element[0].innerHTML)\n\t\t\t{\n\t\t\t\tcase 'Victor':\n\t\t\t\t\telement.style.color = \"orange\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Ashfak':\n\t\t\t\t\telement.style.color = \"red\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Tiffanie':\n\t\t\t\t\telement.style.color = \"blue\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Zhipeng':\n\t\t\t\t\telement.style.color = \"green\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\telement.style.color = \"white\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} \n\t}\n\trender()\n\t{\n\t\treturn <div>\n\t\t<input type = \"text\" id = \"input\"></input>\n\t\t<button id = \"send\" onClick={this.send}>Send</button>\n\t\t</div>\n\t}\n\n}\nclass List extends React.Component \n{\n\tconstructor(props) \n\t{\n\t\tsuper(props);\n\t\tthis.state = { names: [], texts : [] };\n\t}\n\tasync componentDidMount() \n\t{\n\t\tlet b = await this.callBackendAPI();//.then(res => \n\t\tconsole.log(b);\n\t\tthis.setState({ names: b.names });//.catch(err => console.log(err));\n\t}\n    // fetching the GET route from the Express server which matches the GET route from server.js\n\tcallBackendAPI = async () => \n\t{\n\t\tconst response = await fetch('http://localhost:5000/express_backend/');\n\t\tconst body = await response.json();\n\t\tif (response.status !== 200) \n\t\t{\n\t\t\tthrow Error(body.message) \n\t\t}\n\t\treturn body;\n\t};\n\n\tcomponentWillUnmount() {}\n\trender() \n\t{\n\t\tlet i = 0;\t\n\t\treturn (<div>{this.state.names.map((e) => <Message name = {e.name} text = {e.msg} color = {e.color} key = {i++} />)}\n\t\t\t\n\t\t\t<Send />\n\t\t</div>);\n\t\t//\t<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n\t\t//\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n\t\t//\t<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap\" rel=\"stylesheet\">\n\t\t//</div>);\n\n\t}\n}\nconst container = document.getElementById('root');\n\n// Create a root.\nconst root = ReactDOMClient.createRoot(container);\nroot.render(<List />);"]},"metadata":{},"sourceType":"module"}